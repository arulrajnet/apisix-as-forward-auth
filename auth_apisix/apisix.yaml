routes:
  -
    uris:
      - /__auth/*
      - /__auth/
    plugins:
      openid-connect:
        bearer_only: false
        client_id: ${{IDP_CLIENT_ID}}
        client_secret: ${{IDP_CLIENT_SECRET}}
        discovery: "https://${{IDP_DOMAIN}}/.well-known/openid-configuration"
        introspection_endpoint_auth_method: "client_secret_post"
        logout_path: "/__auth/logout"
        redirect_uri: "https://${{SERVER_DOMAIN}}/__auth/callback"
        post_logout_redirect_uri: "https://${{SERVER_DOMAIN}}/"
        scope: "openid profile email"
        set_refresh_token_header: true
        authorization_params:
          response_type: "code"
          audience: ${{IDP_AUDIENCE}}
        session:
          cookie:
            lifetime: 86400 #(integer, default: 3600): Lifetime of the session cookie in seconds.
            domain: "${{SERVER_DOMAIN}}"
            path: "/"
            secure: "on"
            http_only: "on"
          secret: ${{SESSION_SECRET}}
      mocking:
        response_status: 202
        response_example: "User is authenticated successfully!\n"
      serverless-post-function:
        phase: access
        functions:
          - |
            return function(conf, ctx)
              local core = require('apisix.core')
              local ngx = ngx

              -- Get the X-Userinfo header set by OpenID Connect plugin
              local userinfo_header = core.request.header(ctx, 'X-Userinfo')

              if userinfo_header then
                -- Decode base64
                local userinfo_json = ngx.decode_base64(userinfo_header)
                if userinfo_json then
                  -- Parse JSON
                  local userinfo = core.json.decode(userinfo_json)
                  if userinfo then
                    -- Set individual headers
                    core.request.set_header(ctx, 'X-Auth-Request-User-Id', userinfo.sub or '')
                    core.request.set_header(ctx, 'X-Auth-Request-Email', userinfo.email or '')
                    core.request.set_header(ctx, 'X-Auth-Request-Name', userinfo.name or '')
                  end
                end
              end

              -- Rename existing headers for upstream

              local access_token = core.request.header(ctx, 'X-Access-Token')
              if access_token then
                core.request.set_header(ctx, 'X-Auth-Request-Access-Token', access_token)
              end

              local id_token = core.request.header(ctx, 'X-ID-Token')
              if id_token then
                core.request.set_header(ctx, 'X-Auth-Request-ID-Token', id_token)
              end

              local refresh_token = core.request.header(ctx, 'X-Refresh-Token')
              if refresh_token then
                core.request.set_header(ctx, 'X-Auth-Request-Refresh-Token', refresh_token)
              end

              local userinfo_raw = core.request.header(ctx, 'X-Userinfo')
              if userinfo_raw then
                core.request.set_header(ctx, 'X-Auth-Request-Userinfo', userinfo_raw)
              end
            end
    upstream:
      type: roundrobin
      nodes:
        "127.0.0.1:65535": 1

#END
